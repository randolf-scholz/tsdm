#
# https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml
#
default:
  image: python:3.9
  tags:  [docker]

variables:
  MODULEDIR:      tsdm
  TESTDIR:        test
  TWINE_PASSWORD: ${CI_JOB_TOKEN}
  TWINE_USERNAME: gitlab-ci-token
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - .pytest_cache
    - .mypy_cache
    - VIRTUALENV/

stages:
  - build
  - analysis
  - test
  - deploy

before_script:  # global before_script is run before each and every job.
  - source VIRTUALENV/bin/activate

################
# STAGE: SETUP #
################

build:setup:
  stage: build
  before_script:
    - python -V
    - pip install --upgrade pip virtualenv
    - virtualenv VIRTUALENV
    - source VIRTUALENV/bin/activate
  script:
    # install special dependency
    # - pip install git+ssh://git@software.ismll.uni-hildesheim.de/ISMLL-internal/special-interest-group-time-series/tsdm.git
    # - pip install git+ssh://git@git.tu-berlin.de/bvt-htbd/kiwi/tf1/tsdm.git
    - pip install --upgrade -r requirements.txt
    # try installing tsdm
    - pip install --upgrade -e .

build:wheel:
  stage: build
  only: [ master ]
  script:
    - pip install --upgrade pip wheel
    - python setup.py sdist bdist_wheel
  artifacts:
    paths:
      - dist/*.whl

###################
# STAGE: ANALYSIS #
###################

analysis:pylint:
  # see .pylintrc for configuration
  stage: analysis
  needs: [ "build:setup" ]
  script:
    - pip install --upgrade pylint pylint-exit
    - mkdir pylint
    - pylint $MODULEDIR | tee ./pylint/pylint.log || pylint-exit $?
  after_script:
    - pip install --upgrade anybadge
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - ./pylint/

analysis:flake8:
  # see .flake8 for configuration
  stage: analysis
  needs: [ "build:setup" ]
  script:
    - pip install --upgrade flake8
    - flake8 $MODULEDIR

analysis:mypy:
  # see .mpypy.ini for configuration
  stage: analysis
  needs: [ "build:setup" ]
  script:
    - pip install --upgrade mypy
    - mypy --install-types --non-interactive $MODULEDIR

###############
# STAGE: TEST #
###############

test:flake8:
  # see .flake8 for configuration
  stage: test
  needs: [ "build:setup" ]
  script:
    - pip install --upgrade flake8
    - flake8 $TESTDIR

test:mypy:
  # see .mpypy.ini for configuration
  stage: test
  needs: [ "build:setup" ]
  script:
    - pip install --upgrade mypy
    - mypy --install-types --non-interactive $TESTDIR

test:pytest:
  # see pytest.ini for configuration
  stage: test
  needs: [ "build:setup" ]
  script:
    - pip install --upgrade pytest
    - pytest --junitxml=report.xml $TESTDIR
  artifacts:
    # https://software.ismll.uni-hildesheim.de/help/ci/unit_test_reports
    when: always
    reports:
      junit: report.xml

test:pylint:
  # see .pylintrc for configuration
  stage: test
  needs: [ "build:setup" ]
  script:
    - pip install --upgrade pylint pylint-exit
    - pylint $TESTDIR

test:coverage:
  # https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html
  stage: test
  needs: [ "build:setup" ]
  script:
    - pip install --upgrade pytest pytest-cov
    - pytest --cov=$MODULEDIR $TESTDIR
    - coverage xml
  artifacts:
    reports:
      cobertura: coverage.xml

#################
# STAGE: DEPLOY #
#################

deploy:twine:
  stage: deploy
  only: [ master ]
  allow_failure: true
  needs: [ "build:wheel" ]
  script:
    - pip install --upgrade twine
    # upload as a PyPi package to gitlab registry
    - twine upload --verbose --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*

deploy:sphinx:
  stage: deploy
  only: [ master ]
  allow_failure: true
  needs: [ "build:setup" ]
  script:
    - pip install --upgrade sphinx sphinx-rtd-theme sphinx-math-dollar
    - cd docs
    - make html
  after_script:  # note: after_script resets working dir
    - mv  docs/_build/html/  public/
  artifacts:
    paths:
      - public

