r"""Protocol for optimizers."""

__all__ = [
    "Optimizer",
    "LRScheduler",
]

from collections.abc import Callable
from typing import Any, Optional, Protocol, overload

type StateDict = dict[str, Any]


class Optimizer(Protocol):
    r"""Protocol for optimizers."""

    def add_param_group(self, param_group: dict[str, Any]) -> None: ...
    def state_dict(self) -> StateDict: ...
    def load_state_dict(self, state_dict: StateDict) -> None: ...
    @overload
    def step(self, closure: None = ...) -> None: ...
    @overload
    def step(self, closure: Callable[[], float]) -> float: ...
    def zero_grad(self, *, set_to_none: bool = True) -> None: ...


class LRScheduler(Protocol):
    r"""Protocol for learning rate schedulers."""

    def state_dict(self) -> StateDict: ...
    def load_state_dict(self, state_dict: StateDict) -> None: ...
    def step(self, epoch: Optional[int] = None) -> None: ...
    def get_last_lr(self) -> list[float]: ...
    def get_lr(self) -> list[float]: ...
