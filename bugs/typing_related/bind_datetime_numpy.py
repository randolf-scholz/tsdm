#!/usr/bin/env python

from typing import Any, Protocol, SupportsFloat, SupportsInt, TypeVar, cast

import numpy as np

# FIXME: https://github.com/python/typing/issues/548
TD = TypeVar("TD", bound="TimeDelta")
DT = TypeVar("DT", bound="DateTime[Any]")


class TimeDelta(Protocol):
    """Time delta provides several arithmetical operations."""

    # unary operations
    def __pos__(self: TD) -> TD: ...
    def __neg__(self: TD) -> TD: ...
    def __abs__(self: TD) -> TD: ...
    def __bool__(self) -> bool: ...

    # comparisons
    def __le__(self: TD, other: TD, /) -> bool: ...
    def __lt__(self: TD, other: TD, /) -> bool: ...
    def __ge__(self: TD, other: TD, /) -> bool: ...
    def __gt__(self: TD, other: TD, /) -> bool: ...

    # arithmetic
    # addition +
    def __add__(self: TD, other: TD, /) -> TD: ...
    def __radd__(self: TD, other: TD, /) -> TD: ...

    # subtraction -
    def __sub__(self: TD, other: TD, /) -> TD: ...
    def __rsub__(self: TD, other: TD, /) -> TD: ...

    # multiplication *
    def __mul__(self: TD, other: int, /) -> TD: ...
    def __rmul__(self: TD, other: int, /) -> TD: ...

    # division /
    def __truediv__(self: TD, other: TD, /) -> SupportsFloat: ...

    # @overload
    # def __truediv__(self, other: Self, /) -> float: ...
    # @overload
    # def __truediv__(self, other: float, /) -> Self: ...

    # floor division //
    def __floordiv__(self: TD, other: TD, /) -> SupportsInt: ...

    # @overload
    # def __floordiv__(self, other: Self, /) -> int: ...
    # @overload
    # def __floordiv__(self, other: int, /) -> Self: ...

    # modulo %
    def __mod__(self: TD, other: TD, /) -> TD: ...

    # NOTE: __rmod__ missing on fallback pydatetime
    # def __rmod__(self, other: Self, /) -> Self: ...

    # divmod
    def __divmod__(self: TD, other: TD, /) -> tuple[SupportsInt, TD]: ...

    # NOTE: __rdivmod__ missing on fallback pydatetime
    # def __rdivmod__(self, other: Self, /) -> tuple[SupportsInt, Self]: ...


class DateTime(Protocol[TD]):  # bind appropriate TimeDelta type
    """Datetime can be compared and subtracted."""

    def __le__(self: DT, other: DT, /) -> bool: ...
    def __lt__(self: DT, other: DT, /) -> bool: ...
    def __ge__(self: DT, other: DT, /) -> bool: ...
    def __gt__(self: DT, other: DT, /) -> bool: ...

    def __add__(self: DT, other: TD, /) -> DT: ...
    def __radd__(self: DT, other: TD, /) -> DT: ...

    # NOTE: we only keep this overload, the others are fragile.
    def __sub__(self: DT, other: DT, /) -> TD: ...

    # @overload
    # def __sub__(self, other: TD, /) -> Self: ...
    # @overload
    # def __sub__(self, other: Self, /) -> TD: ...

    # NOTE: __rsub__ missing on fallback pydatetime
    # @overload
    # def __rsub__(self, other: TD, /) -> Self: ...
    # @overload
    # def __rsub__(self, other: Self, /) -> TD: ...


def foo(__val: DT, /) -> DT:  # DT = TypeVar("DT", bound="DateTime")
    return __val


dt_numpy = np.datetime64("2021-01-01")
x: DateTime[Any] = dt_numpy  # ✅
y: DateTime[np.timedelta64] = dt_numpy  # ✅
foo(cast(DateTime, x))  # ✅
foo(cast(DateTime[np.timedelta64], y))  # ✅
foo(dt_numpy)  # ❌
reveal_type(x)  # why datetime64 instead of DateTime[Any]?
reveal_type(y)  # why datetime64 instead of DateTime[np.timedelta64]?
