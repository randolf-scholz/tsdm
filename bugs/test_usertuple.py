# #!/usr/bin/env python3.12
# r"""Testing UserTuple class."""
#
# from types import GenericAlias
# from typing import (
#     Any,
#     Iterator,
#     Self,
#     SupportsIndex,
#     Union,
#     overload,
# )
#
#
# class UserTuple[*Ts]:
#     def __new__(cls, iterable: tuple[*Ts] = ..., /) -> Self: ...
#     def __len__(self) -> int: ...
#     def __contains__(self, key: object, /) -> bool: ...
#     @overload
#     def __getitem__(self, key: SupportsIndex, /) -> Union[*Ts]: ...
#     @overload
#     def __getitem__(self, key: slice, /) -> UserTuple[Union[*Ts], ...]: ...
#     def __iter__(self) -> Iterator[Union[*Ts]]: ...
#     def __lt__(self, value: Self, /) -> bool: ...
#     def __le__(self, value: Self, /) -> bool: ...
#     def __gt__(self, value: Self, /) -> bool: ...
#     def __ge__(self, value: Self, /) -> bool: ...
#     def __eq__(self, value: object, /) -> bool: ...
#     def __hash__(self) -> int: ...
#     def __add__[*Vs](self, value: UserTuple[*Vs], /) -> UserTuple[*Ts, *Vs]: ...
#     def __mul__(self, value: SupportsIndex, /) -> UserTuple[Union[*Ts], ...]: ...
#     def __rmul__(self, value: SupportsIndex, /) -> UserTuple[Union[*Ts], ...]: ...
#     def count(self, value: object, /) -> int: ...
#     def index(
#         self, value: object, start: SupportsIndex = ..., stop: SupportsIndex = ..., /
#     ) -> int: ...
#     def __class_getitem__(cls, item: Any, /) -> GenericAlias: ...
