# [build-system]
# requires = ["poetry-core>=1.6.0"]
# build-backend = "poetry.core.masonry.api"


# region project configuration ---------------------------------------------------------
[project]
name = "tsdm"
version = "0.6.0"
authors = [{name="Randolf Scholz", email="randolf.scholz@gmail.com"}]
description = "Time-Series Datasets and Models"

# package content
license = {file="LICENSE"}
readme = "README.md"

# meta-information
keywords = ["time-series", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: GPU :: NVIDIA CUDA :: 12.1",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed",
    "Operating System :: POSIX :: Linux",
]

# dependencies
requires-python = ">=3.12,<3.13"
dependencies = [
    "matplotlib>=3.9.2",
    "numpy>=2.1.0",
    "pandas>=2.2.2",
    "pillow>=10.4.0",
    "polars>=1.5.0",
    "pyarrow>=17.0.0",
    "pydantic>=2.8.2",
    "pyyaml>=6.0.2",
    "requests>=2.32.3",
    "scikit-learn>=1.5.1",
    "scipy>=1.14.0",
    "tensorboard>=2.17.1",
    "torch>=2.4.0",
    "tqdm>=4.66.5",
    "typing-extensions>=4.12.2",
]

[project.urls]
homepage = "https://git.tu-berlin.de/bvt-htbd/kiwi/tf1/tsdm"
documentation = "https://bvt-htbd.gitlab-pages.tu-berlin.de/kiwi/tf1/tsdm/"
repository = "https://git.tu-berlin.de/api/v4/projects/6694/packages/pypi/simple"
# endregion project configuration ------------------------------------------------------


# region development dependencies ------------------------------------------------------
[tool.pdm.dev-dependencies]
docs = [
    "docutils>=0.21.2",
    "myst-parser>=4.0.0",
    "nbsphinx>=0.9.5",
    "piccolo-theme>=0.23.0",
    "pydata-sphinx-theme>=0.15.4",
    "sphinx-autoapi>=3.2.1",
    "sphinx-automodapi>=0.17.0",
    "sphinx-autodoc2>=0.5.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-math-dollar>=1.2.1",
    "sphinx-togglebutton>=0.3.2",
    "sphinx-typo3-theme>=4.9.0",
    "sphinx>=8.0.2",
]
tests = [
    "coverage>=7.6.1",
    "hypothesis[numpy,pandas,pytest]>=6.111.1",
    "pytest-benchmark[histogram]>=4.0.0",
    "pytest-cases>=3.8.5",
    "pytest-cov>=5.0.0",
    "pytest-repeat>=0.9.3",
    "pytest-rerunfailures>=14.0",
    "pytest-xdist>=3.6.1",
    "pytest>=8.3.2",
]
linters = [
    "pylint>=3.2.6",
    "ruff>=0.6.1",
    "tach>=0.10.0",
]
typing = [
    "mypy>=1.11.1",
    "pyright>=1.1.376",
    "types-colorama>=0.4.15.20240311",
    "types-decorator>=5.1.8.20240310",
    "types-docutils>=0.21.0.20240724",
    "types-jsonschema>=4.23.0.20240813",
    "types-pillow>=10.2.0.20240520",
    "types-protobuf>=5.27.0.20240626",
    "types-psutil>=6.0.0.20240621",
    "types-pygments>=2.18.0.20240506",
    "types-pytz>=2024.1.0.20240417",
    "types-pyyaml>=6.0.12.20240808",
    "types-requests>=2.32.0.20240712",
    "types-setuptools>=71.1.0.20240818",
    "types-six>=1.16.21.20240513",
    "types-tabulate>=0.9.0.20240106",
    "types-tqdm>=4.66.0.20240417",
    "types-urllib3>=1.26.25.14",
    "typing-extensions>=4.12.2",
]
devtools = [
    "devtools>=0.12.2",
    "pip>=24.2",
    "pre-commit>=3.8.0",
    "pybadges>=3.0.1",
    "pygments>=2.18.0",
    "setuptools>=72.2.0",
    "twine>=5.1.1",
    "wheel>=0.44.0",
]
experiment = [
    "ipympl>=0.9.4",
    "ipywidgets>=8.1.3",
    "jupyterlab-execute-time>=3.1.2",
    "jupyterlab>=4.2.4",
    "notebook>=7.2.1",
    "openml>=0.14.2",
    "openpyxl>=3.1.5",
    "psutil>=6.0.0",
    "pygments>=2.18.0",
    "torchinfo>=1.8.0",
]
# endregion development dependencies ---------------------------------------------------


# region ruff configuration ------------------------------------------------------------
[tool.ruff]
src = ["src/", "tests/"]
indent-width = 4
line-length = 88
target-version = "py311"
output-format = "concise"

[tool.ruff.lint]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

select = [
    "A",     # builtins
    "ARG",   # unused-arguments
    "B",     # bugbear
    "C4",    # comprehensions
    "D",     # pydocstyle
    "E",     # pycodestyle
    "EXE",   # executable
    "F",     # pyflakes
    "FBT",   # boolean-trap
    "FURB",  # refurb
    "I",     # import-order
    "ICN",   # import-conventions
    "ISC",   # implicit-str-concat
    "NPY",   # numpy
    "N",     # naming
    "PERF",  # performance related
    "PIE",   # pie
    "PL",    # pylint
    "PT",    # pytest
    # "PTH",   # path
    "PYI",   # pyi
    # "RET",   # return
    "RUF",   # ruff specific
    "S101",  # use of `assert`
    "SIM",   # simplify
    "SLOT",  # slots
    "TCH",   # type-checking
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # warnings
]
ignore = [
    # annotations
    "ANN",      # missing-annotations
    # unused-arguments
    "ARG003",   # Unused class method argument
    # commas
    "COM",      # comma
    # copyright
    "CPY",      # missing-copyright
    # pydocstyle
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D105",     # Missing docstring in magic method
    "D107",     # Missing docstring in __init__
    # pycodestyle
    "E201",     # Whitespace after '('
    "E202",     # Whitespace before ')'
    "E203",     # Whitespace before ':'
    "E221",     # Multiple spaces before operator
    # "E226",   # Missing whitespace around arithmetic operator
    # "E231",   # Missing whitespace after ','
    "E241",     # Multiple spaces after comma
    "E271",     # Multiple spaces after keyword
    "E272",     # Multiple spaces before keyword
    # error-messages
    "EM",       # error-messages
    # fixme
    "FIX",      # fixme
    # refurb
    "FURB140",  # reimplemented-starmap (less efficient than comprehension)
    # naming
    "N801",     # class names should use CapWords convention
    "N806",     # variable in function should be lowercase
    "N812",     # lowercase imported as non-lowercase
    # pandas
    "PD011",    # Use .to_numpy() instead of .values
    # pylint
    "PLC2401",  # non-ascii-name
    "PLC2801",  # unnecessary-dunder-call
    "PLR0124",  # Name compared with itself
    "PLR2004",  # Magic value used in comparison
    "PLR6104",  # non-augmented-assignment
    "PLR6301",  # no-self-use
    # pylint "too-many-*" rules
    "PLR0904",  # Too many public methods
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments in function definition
    "PLR0914",  # Too many local variables
    "PLR0915",  # Too many statements
    "PLR0916",  # Too many boolean expressions
    "PLR0917",  # Too many positional arguments
    # flake8-pyi
    "PYI051",   # redundant-literal-union
    # RUFF
    "RUF001",   # ambiguous-unicode-character-string
    "RUF002",   # ambiguous-unicode-character-docstring
    "RUF003",   # ambiguous-unicode-character-comment
    "RUF012",   # Mutable class attributes should be annotated with typing.ClassVar # FIXME: PEP 603
    "RUF013",   # PEP 484 prohibits implicit Optional
    "RUF022",   # __all__ not sorted
    # todo
    "TD",       # todo
    # tryceratops
    "TRY003",   # Avoid specifying long messages outside the exception class
    # pyupgrade
    "UP007",    # Use `X | Y` for type annotations
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "N803", "T20"]
"src/tsdm/linalg/*" = ["FBT001", "FBT002", "PLR6104"]
"src/tsdm/metrics/*" = ["PLR6301", "PLR6104"]
"src/tsdm/models/*" = ["N803"]
"src/tsdm/testing/*" = ["S101"]
"src/tsdm/types/*" = ["ERA001"]

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__array__", "__array_ufunc__", "__dataframe__", "_repr_html_"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 120
max-line-length = 120

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"
# endregion ruff configuration ---------------------------------------------------------


# region pylint Configuration ----------------------------------------------------------
[tool.pylint]
[tool.pylint."MESSAGES CONTROL"]
enable = ["useless-suppression"]
disable = [
    "C0103",  # invalid-name  # Ridiculous...
    "C0144",  # non-ascii-name
    "C0204",  # bad-mcs-classmethod-argument
    "C0301",  # line-too-long
    # "E0611",  # no-name-in-module
    "E1101",  # no-member  # FIXME: too many false positives
    "E1102",  # not-callable  # FIXME: too many false positives (torch)
    "E1121",  # too-many-function-args  # FIXME: too many false positives
    "E1123",  # unexpected-keyword-arg  # FIXME: too many false positives
    "E1130",  # invalid-unary-operand-type
    "E1139",  # invalid-metaclass  # FIXME: too many false positives
    "R0801",  # similar lines
    "R0902",  # too-many-instance-attributes
    "R0903",  # too-few-public-methods
    "R0911",  # too-many-return-statements
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    # "W0221",  # arguments-differ
    # "W0511",  # (fixme) (todos)
    "W1113",  # keyword-arg-before-vararg
    "W2301",  # unnecessary-ellipsis
]
fail-on = [
    "C0116",  # missing-function-docstring
]
fail-under = 9.0

[tool.pylint.REPORTS]
# Set the output format. Available formats are text, parseable, colorized, json and
# msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass
output-format = "colorized"

[tool.pylint.FORMAT]
max-line-length = 120

[tool.pylint.TYPECHECK]
# List of members which are set dynamically and missed by pylint inference system, and so shouldn't
# trigger E1101 when accessed. Python regular expressions are accepted.
generated-members = ["numpy.*", "torch.*"]
# endregion pylint Configuration -------------------------------------------------------


# region mypy configuration ------------------------------------------------------------
[tool.mypy]
# platform = "linux"
# platform configuration
enable_incomplete_feature = "NewGenericSyntax"
files = ["src/", "tests/"]
plugins = ["numpy.typing.mypy_plugin"]
python_version = "3.12"

disable_error_code = [
    "func-returns-value",  # REF: https://github.com/python/mypy/issues/6549
#    "overload-overlap",  # REF: https://mypy.readthedocs.io/en/stable/more_types.html#type-checking-the-variants
    "method-assign",  # REF: https://github.com/python/mypy/issues/2427#issuecomment-1419206807
    "no-overload-impl", # REF: https://github.com/python/mypy/issues/17618
]

# warnings
warn_no_return = true
warn_redundant_casts = true
warn_return_any = false
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# disallow dynamic typing
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false

# untyped definitions
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_untyped_defs = true

# strictness flags
allow_untyped_globals = false
allow_redefinition = false
#local_partial_types = true
no_implicit_reexport = false
#strict_equality = false
#strict = false
#disable_error_code = []
#enable_error_code =[]

# configuring error messages
show_error_context = true
show_column_numbers = true
show_error_end = true
hide_error_codes = false
pretty = false
no_error_summary = false
no_color_output = false
show_absolute_path = false
#soft_error_limit = 200

# incremental mode
no_incremental = false
#cache_dir = ".mypy_cache/"
#sqlite_cache = true
#cache_fine_grained = true
#skip_version_check = false
#skip_cache_mtime_checks = false

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "pyarrow.*",
    "scipy.*",
    "sklearn.*",
]
ignore_missing_imports = true
# endregion mypy configuration ---------------------------------------------------------


# region pyright Configuration ---------------------------------------------------------
[tool.pyright]
venv = ".venv"
venvPath = "."
pythonVersion = "3.12"
pythonPlatform = "Linux"
include = ["src/", "tests/"]

# Type Check Diagnostics Settings
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#type-check-diagnostics-settings
typeCheckingMode = "standard"
useLibraryCodeForTypes = false  # `pandas` has way too many false positives
#reportIncompatibleMethodOverride = false  # FIXME: temporary
#reportIncompatibleVariableOverride = false  # FIXME: temporary
#reportMissingImports = false
#reportMissingTypeStubs = false
reportPrivateImportUsage = false  # FIXME: temporary
reportOverlappingOverload = true
reportNoOverloadImplementation = false  # REF: https://github.com/microsoft/pyright/issues/8619
reportUntypedClassDecorator = true
#reportPrivateImportUsage = false
#reportSelfClsParameterName = false
reportUnnecessaryTypeIgnoreComment = false  # highlight any unnecessary "# type: ignore" comments
#reportUnsupportedDunderAll = false
# endregion pyright Configuration ------------------------------------------------------


# region pytest configuration ----------------------------------------------------------
[tool.pytest]
# NOTE: currently unused https://docs.pytest.org/en/stable/reference/customize.html

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["src/", "tests/"]
addopts = [
    "--doctest-modules",
    "--junit-xml=reports/pytest.xml",
    # rerunfailures options
    #    "--reruns=",          # number of times to re-run failed tests (default 0)
    #    "--reruns-delay=",    # add time (seconds) delay between reruns.
    #    "--only-rerun=",      # If passed, only rerun errors matching the regex provided.
    # xdists options
    "--numprocesses=0",  # use 4 parallel processes
    # "--dist=loadfile", # loadscope, loadfile, load, each, no
    # coverage options
    "--cov=tsdm",  # Path or package name to measure during execution (multi-allowed).
    "--cov-report=term:skip-covered",
    "--cov-report=xml:reports/coverage.xml",
    #    "--cov-report=annotate:reports/coverage",
    # benchmark options
    "--benchmark-group-by=func",
    "--benchmark-sort=mean",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "serial",
]
required_plugins = [
    "pytest-benchmark",
    "pytest-cov",
    "pytest-repeat",
    "pytest-rerunfailures",
    "pytest-xdist",
]
# endregion pytest configuration -------------------------------------------------------


# region coverage configuration --------------------------------------------------------
[tool.coverage]

[tool.coverage.paths]
source = ["src/tsdm"]

[tool.coverage.report]
exclude_lines = [
    "@abstractmethod",
    "@abc.abstractmethod",
    "@overload",
    "@typing.overload",
]

[tool.coverage.run]
source = ["src/"]
# endregion coverage configuration -----------------------------------------------------
