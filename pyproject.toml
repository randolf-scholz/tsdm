[build-system]
requires = ["poetry-core>=1.4.2"]
build-backend = "poetry.core.masonry.api"


########################
# Poetry Configuration #
########################

[tool.poetry]
authors = ["Randolf Scholz <rscholz@ismll.de>"]
description = "Time-Series Datasets and Models"
documentation = "https://bvt-htbd.gitlab-pages.tu-berlin.de/kiwi/tf1/tsdm/"
homepage = "https://git.tu-berlin.de/bvt-htbd/kiwi/tf1/tsdm"
include = ["CHANGELOG.rst", "LICENSE.rst", "CONTRIBUTING.rst"]
keywords = ["time series", "machine learning"]
license = "MIT"
name = "tsdm"
packages = [{include = "tsdm", from="src"}]
readme = "README.rst"
repository = "https://git.tu-berlin.de/api/v4/projects/6694/packages/pypi"
version = "0.4.7"

classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: GPU :: NVIDIA CUDA :: 11.6",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed",
    "Operating System :: POSIX :: Linux",
]


[tool.poetry.extras]
# modin = ["modin"]
# all = ["modin"]
#modin = {version = ">=0.14", extras = ["ray"]}
#ray = {version = ">=1.9", extras = ["default", "tune"]}


[tool.poetry.dependencies]
python = ">=3.10,<3.12"
h5py = ">=3.8.0"
matplotlib = ">=3.7.1"
numpy = ">=1.24.3"
pandas = ">=2.0.1"
pillow = ">=9.5.0"
pyarrow = ">=12.0.0"
pyyaml = ">=6.0"
scikit-learn = ">=1.2.2"
scipy = ">=1.10.1"
tensorboard = ">=2.13.0"
torch = ">=2.0.1"
tqdm = ">=4.65.0"
typing-extensions = ">=4.3"


[tool.poetry.group.dev.dependencies]
matplotlib = ">=3.7.1"
bandit = ">=1.7.5"
black = {version = ">=23.1", extras = ["d", "jupyter"]}
blacken-docs = ">=1.13.0"
coverage = ">=7.2.5"
docutils = ">=0.20"
flake8 = ">=6.0.0"
flake8-annotations = ">=3.0.1"
flake8-black = ">=0.3.6"
flake8-bugbear = ">=23.5.9"
flake8-comprehensions = ">=3.12.0"
flake8-docstrings = ">=1.7.0"
flake8-pyi = ">=23.5.0"
flake8-rst = ">=0.8.0"
flake8-rst-docstrings = ">=0.3.0"
ipywidgets = ">=8.0.6"
isort = ">=5.12.0"
jupyterlab = ">=3.6.3"
mypy = ">=1.3.0"
nbsphinx = ">=0.9.1"
openml = ">=0.13.1"
openpyxl = ">=3.1.2"
perflint = ">=0.7.3"
piccolo-theme = ">=0.15.0"
pip = ">=23.1.2"
pre-commit = ">=3.3.1"
psutil = ">=5.9.5"
pyall = ">=0.3.5"
pybadges = ">=3.0.0"
pycodestyle = ">=2.10.0"
pydata-sphinx-theme = ">=0.13.3"
pydeps = ">=1.12.3"
pydocstyle = ">=6.3.0"
pyflakes = ">=3.0.1"
pygments = ">=2.15.1"
pylint = ">=2.17.4"
pylint-gitlab = ">=1.2.0"
pyre-check = ">=0.9.18"
pyright = ">=1.1.308"
pytest = ">=7.3.1"
pytest-cov = ">=4.0.0"
pytest-rerunfailures = ">=11.1.2"
ruff = ">=0.0.267"
setuptools = ">=67.7.2"
slotscheck = ">=0.16.5"
sphinx = ">=7.0.1"
sphinx-autoapi = ">=2.1.0"
sphinx-automodapi = ">=0.15.0"
sphinx-copybutton = ">=0.5.2"
sphinx-math-dollar = ">=1.2.1"
sphinx-typo3-theme = ">=4.7.10"
tqdm = ">=4.65.0"
twine = ">=4.0.2"
types-colorama = ">=0.4.15"
types-docutils = ">=0.20.0"
types-pillow = ">=9.5.0"
types-protobuf = ">=4.23.0"
types-psutil = ">=5.9.5"
types-pygments = ">=2.15.0"
types-pyyaml = ">=6.0.12"
types-requests = ">=2.30.0"
types-setuptools = ">=67.7.0"
types-six = ">=1.16.21"
types-typing-extensions = ">=3.7.3"
types-urllib3 = ">=1.26.25"
wheel = ">=0.40.0"
yesqa = ">=1.4.0"


[tool.poetry.scripts]

########################
# PyLint Configuration #
########################
[tool.pylint]
[tool.pylint."MESSAGES CONTROL"]
enable= [
    "useless-suppression",
]
disable= [
    "C0103",  # invalid-name
    "C0144",  # non-ascii-name
    "C0204",  # bad-mcs-classmethod-argument
#    "C0415",  # import-outside-toplevel
    "E0611",  # no-name-in-module
    "E1130",  # invalid-unary-operand-type
    "R0801",  # similar lines
    "R0902",  # too-many-instance-attributes
    "R0903",  # too-few-public-methods
    "R0911",  # too-many-return-statements
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "W0221",  # arguments-differ
    "W1113",  # keyword-arg-before-vararg
#    "W0511",  # (fixme) (todos)
    "E1101",  # no-member  # FIXME: too many false positives
]
fail-on= [
    "C0116",  # missing-function-docstring
]
fail-under= 9.0

[tool.pylint.REPORTS]
# Set the output format. Available formats are text, parseable, colorized, json and
# msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass
output-format="colorized"

[tool.pylint.FORMAT]
max-line-length=120

[tool.pylint.TYPECHECK]
# List of members which are set dynamically and missed by pylint inference system, and so shouldn't
# trigger E1101 when accessed. Python regular expressions are accepted.
generated-members=["numpy.*", "torch.*"]


######################
# MyPy Configuration #
######################
[tool.mypy]
python_version = "3.10"
files = ["src/", "tests/"]
plugins = ["numpy.typing.mypy_plugin"]
#enable_incomplete_feature = ["Self"]


# formatting
color_output = true
error_summary = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

# warnings
warn_no_return = true
warn_redundant_casts = true
#warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


# strictness flags
#disallow_untyped_globals = true
allow_redefinition = false
check_untyped_defs = true
#disallow_untyped_defs = true
disallow_incomplete_defs = true

#warn-unused-configs
#disallow-any-generics
#disallow-subclassing-any
#disallow-untyped-calls
#disallow-untyped-defs
#disallow-incomplete-defs
#check-untyped-defs
#disallow-untyped-decorators
#warn-redundant-casts
#warn-unused-ignores
#warn-return-any
#no-implicit-reexport
#strict-equality
#strict-concatenate


[[tool.mypy.overrides]]
module = [
    "h5py.*",
    "matplotlib.*",
    "modin.*",
    "numba.*",
    "pandas.*",
    "pyarrow.*",
    "scipy.*",
    "sklearn.*",
    "tqdm.*",
]
ignore_missing_imports = true


#######################
# isort Configuration #
#######################
[tool.isort]
# isort profiles: black, django, pycharm, google, open_stack, plone, attrs, hug, wemake, appnexus
# black-compatible: black, appnexus
py_version=310
profile="black"
src_paths=["src/", "tests/"]
known_first_party = ["linodenet", "tsdm"]
# flake8-profiles: appnexus, cryptography, edited, google, pep8, pycharm, smarkets
# black-compatible: black, appnexus

#######################
# black Configuration #
#######################
[tool.black]
line-length = 88
target-version = ['py310']
color = true

############################
# pydocstyle Configuration #
############################
[tool.pydocstyle]
convention = "google"
#count = true
# https://github.com/PyCQA/pydocstyle/issues/363
#match = '.*\.py$'
#match = '(?!test_).*\.py$'
match_dir = '^(?!(.venv|bugs|dev|.*ipynb_checkpoints)).*'
add-ignore = [
    "D105",    # Missing docstring in magic method
    "D102",    # Missing docstring in public method
    "D107",    # Missing docstring in __init__
]

#########################
# pyright Configuration #
#########################
[tool.pyright]
root = ""
venv = ".venv"
venvPath = "."
pythonVersion = "3.10"
pythonPlatform = "Linux"
stubPath = ""
include = ["src/", "tests/"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/.ipynb_checkpoints",
]
executionEnvironments = [
    {root = "src/", pythonVersion = "3.10", pythonPlatform = "Linux", extraPaths = [""]}
]
# region Type Check Diagnostics Settings
reportMissingImports = false
reportMissingTypeStubs = false
reportUnsupportedDunderAll = false
reportPrivateImportUsage = false
# endregion


########################
# PyTest Configuration #
########################
[tool.pytest]
# NOTE: currently unused https://docs.pytest.org/en/stable/reference/customize.html

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = [ "src/", "tests/"]
addopts = [
    "--doctest-modules",
    "--junit-xml=reports/pytest.xml",
    # rerunfailures options
#    "--reruns=",          # number of times to re-run failed tests. defaults to 0.
#    "--reruns-delay=",    # add time (seconds) delay between reruns.
#    "--only-rerun=",      # If passed, only rerun errors matching the regex provided.
    # coverage options
    "--cov=tsdm",  # Path or package name to measure during execution (multi-allowed).
    "--cov-report=term:skip-covered",
    "--cov-report=xml:reports/coverage.xml",
#    "--cov-report=annotate:reports/coverage",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "serial",
]
required_plugins = [
    "pytest-rerunfailures",
    "pytest-cov",
]


##########################
# Coverage Configuration #
##########################
[tool.coverage]

[tool.coverage.paths]
source = ["src/tsdm"]

[tool.coverage.report]
exclude_lines = [
    "@abstractmethod",
    "@abc.abstractmethod",
    "@overload",
    "@typing.overload",
]

[tool.coverage.run]
source = ["src/"]



######################
# Ruff Configuration #
######################
[tool.ruff]
line-length = 120
