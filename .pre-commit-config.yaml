exclude: '(\.git/|\.venv/|\.idea/|\docs/_build/|bugs/)'
minimum_pre_commit_version: 3.6.0
default_language_version:
  python: python3.12
  node: "20.10.0"
repos:
  # https://pre-commit.com/hooks.html
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: check-added-large-files
        description: "prevents giant files from being committed."
      - id: check-ast
        description: "simply checks whether the files parse as valid python."
      - id: check-builtin-literals
        description: "requires literal syntax when initializing empty or zero python builtin types."
      - id: check-byte-order-marker
        description: "forbids files which have a utf-8 byte-order marker."
      - id: check-case-conflict
        description: "checks for files with names that would conflict on a case-insensitive filesystem."
      - id: check-illegal-windows-names
        description: "checks for windows-incompatible filenames."
      - id: check-json
        description: "checks json files for parseable syntax."
      - id: check-executables-have-shebangs
        description: "ensures that (non-binary) executables have a shebang."
      - id: check-shebang-scripts-are-executable
        description: "ensures that (non-binary) files with a shebang are executable."
      - id: check-symlinks
        description: "checks for symlinks which do not point to anything."
      - id: check-toml
        description: "checks toml files for parseable syntax."
      - id: check-xml
        description: "checks xml files for parseable syntax."
      - id: check-yaml
        description: "checks yaml files for parseable syntax."
      - id: debug-statements
        description: "checks for debugger imports and py37+ `breakpoint()` calls in python source."
      - id: end-of-file-fixer
        description: "ensures that a file is either empty, or ends with one newline."
      - id: pretty-format-json
        exclude_types: [jupyter]
        args: ["--autofix"]
        description: "sets a standard for formatting json files."
      - id: requirements-txt-fixer
        description: "sorts entries in requirements.txt"
      - id: trailing-whitespace
        description: "trims trailing whitespace."
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: python-check-blanket-noqa
        description: "Enforce that `noqa` annotations always occur with specific codes. Sample annotations: `# noqa: F401`, `# noqa: F401,W203`"
      - id: python-no-log-warn
        description: "Enforce that `logging.warn` is not used."
      - id: rst-directive-colons
        description: "Enforce that RST directives have colons."
      - id: rst-inline-touching-normal
        description: "Detect mistake of inline code touching normal text in rst"
  # prettier
  #  - repo: https://github.com/pre-commit/mirrors-prettier
  #    rev: v4.0.0-alpha.8
  #    hooks:
  #      - id: prettier
  # absolufy-imports
  - repo: https://github.com/MarcoGorelli/absolufy-imports
    rev: v0.3.1
    hooks:
      - id: absolufy-imports
        files: '^src/|^tests/'
  # ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        files: '^src/|^tests/'
      - id: ruff
        name: ruff-isort
        files: '^src/|^tests/'
        args: ["--select", "I", "--fix"]
      - id: ruff-format
        files: '^src/|^tests/'
  # nbstripout-fast
  - repo: https://github.com/deshaw/nbstripout-fast.git
    rev: v1.0.4
    hooks:
      - id: nbstripout-fast
  # personal hooks
  - repo: https://github.com/randolf-scholz/assorted-hooks.git
    rev: v0.3.7
    hooks:
      # pygrep hooks
      - id: check-separator-length
      - id: pyarrow-timestamp-seconds
      - id: python-consider-using-raw-string
      - id: python-no-blanket-type-ignore
      - id: python-no-builtin-eval
      - id: python-rename-axes-axis
      - id: python-system-exit
      - id: python-match-case-builtins
      # ast-based hooks
      - id: python-check-dunder-all
        files: '^src/'
      - id: python-check-typing
        args: ["--check-no-return-union", "--check-concrete"]
        files: '^src/|^tests/'
        exclude: 'lazydict.py'
      - id: python-direct-imports
      - id: python-no-mixed-args
        files: '^src/'
        args:
          - "--ignore-names"
          - "forward"
          - "predict"
          - "--ignore-decorators"
          - "jit.script"
          - "jit.export"
          - "torch.no_grad"
          - "--allow-two"
          - "--"
      - id: python-standard-generics
      # script-based hooks
      - id: pyproject-validate-version
      - id: pyproject-update-deps
      - id: pyproject-check-unmaintained
      - id: python-check-clean-interface
        files: '^src/'
        exclude: '/tests/'
      # other hooks
      - id: check-resolved-github-issues
        files: '^src/|^tests/'
  # markdownlint
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.42.0
    hooks:
      - id: markdownlint
        args:
          - "--disable" # disable rules
          - "MD013"     # Line length
          - "MD033"     # Inline HTML
          - "--"        # otherwise files are interpreted as args
  # shellcheck
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
    - id: shellcheck
      args: ["-x", "--shell=bash", "--color=always", "--format=gcc", "--"]
  # tach
  - repo: https://github.com/gauge-sh/tach-pre-commit
    rev: v0.13.1 # change this to the latest tag!
    hooks:
      - id: tach
  # mypy
  - repo: local
    hooks:
    - id: mypy
      name: mypy
      language: system
      require_serial: true
      types_or: [python, pyi]
      files: '^src/|^tests/'
      exclude: '/tasks/'
      entry: mypy
      args:
        - "--scripts-are-modules"
        - "--hide-error-context"
        - "--hide-error-end"
        - "--no-pretty"
        - "--"
  # pyright
  - repo: https://github.com/RobertCraigie/pyright-python
    rev: v1.1.384
    hooks:
      - id: pyright
        # SEE: https://stackoverflow.com/a/20401674
#        entry: sh -c '! script -c "pyright $*" /dev/null | grep --color=never -Po "(?<=$PWD/)(.*:.*)"' --
        entry: |
          sh -c '
              result=$(script -c "pyright $*" /dev/null | grep --color=never -Po "(?<=$PWD/)(.*:.*)");
              count=$(echo -n "$result" | grep -c "^");
              if [ "$count" -ne 0 ]; then
                  echo "$result";
                  echo "\033[1;31mFound ${count} errors\033[0m";
                  exit 1;
              fi
          ' --
        files: '^src/|^tests/'
        exclude: '/tasks/'
